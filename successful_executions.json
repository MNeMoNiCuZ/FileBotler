[
  {
    "timestamp": "2024-07-18T00:43:35.414290",
    "instruction": "Increment each number in the name of all our .txt files.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            new_name = ''.join([str(int(char) + 1) if char.isdigit() else char for char in filename])\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            old_path = os.path.join(root_path, filename)\n            new_name = ''.join([str(int(char) + 1) if char.isdigit() else char for char in filename])\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:44:00.286568",
    "instruction": "Increment each number in the name of all our .txt files.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            new_name = ''.join(str(int(char) + 1) if char.isdigit() else char for char in filename)\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            old_path = os.path.join(root_path, filename)\n            new_name = ''.join(str(int(char) + 1) if char.isdigit() else char for char in filename)\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:44:18.855389",
    "instruction": "invert the names of all image files",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):\n            name, ext = os.path.splitext(filename)\n            new_name = f\"{name[::-1]}{ext}\"\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):\n            old_path = os.path.join(root_path, filename)\n            name, ext = os.path.splitext(filename)\n            new_name = f\"{name[::-1]}{ext}\"\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:46:31.970859",
    "instruction": "invert the name of all our .png files, if the file name contains the number 1. Do not invert the extension, just the name.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png') and '1' in filename:\n            name_part = filename[:-4]\n            inverted_name = name_part[::-1] + \".png\"\n            print(f\"Would rename: {filename} -> {inverted_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png') and '1' in filename:\n            old_path = os.path.join(root_path, filename)\n            name_part = filename[:-4]\n            inverted_name = name_part[::-1] + \".png\"\n            new_path = os.path.join(root_path, inverted_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {inverted_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:46:57.667353",
    "instruction": "invert the name of all our .png files, if the file name contains the number 2. Do not invert the extension, just the name.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png') and '2' in filename:\n            name_part = filename[:-4]  # Exclude the '.png' part\n            new_name = f\"{name_part[::-1]}.png\"\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png') and '2' in filename:\n            old_path = os.path.join(root_path, filename)\n            name_part = filename[:-4]  # Exclude the '.png' part\n            new_name = f\"{name_part[::-1]}.png\"\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:47:24.196505",
    "instruction": "change the extension of all csv files to .docx",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.csv'):\n            new_name = filename.replace('.csv', '.docx')\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.csv'):\n            old_path = os.path.join(root_path, filename)\n            new_name = filename.replace('.csv', '.docx')\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T01:01:38.072252",
    "instruction": "remove all numbers from the names of all files",
    "code": "import os\nimport re\n\ndef preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for filename in os.listdir(root_path):\n        new_name = re.sub(r'\\d+', '', filename)\n        if new_name != filename:\n            old_path = os.path.join(root_path, filename)\n            new_path = os.path.join(root_path, new_name)\n            changes.append((old_path, new_path))\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for old_path, new_path in changes:\n        os.rename(old_path, new_path)"
  },
  {
    "timestamp": "2024-07-18T01:24:49.268603",
    "instruction": "change the extension of the images to .jpg",
    "code": "import os\n\ndef preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png'):\n            old_path = os.path.join(root_path, filename)\n            new_name = filename.rsplit('.', 1)[0] + '.jpg'\n            new_path = os.path.join(root_path, new_name)\n            changes.append((old_path, new_path))\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for old_path, new_path in changes:\n        os.rename(old_path, new_path)\n        print(f\"Renamed: {old_path} -> {new_path}\")"
  },
  {
    "timestamp": "2024-07-18T01:39:44.664669",
    "instruction": "zip all text files into a zip file, call it texts",
    "code": "import os\nimport zipfile\n\nROOT_PATH = '/path/to/root'\n\ndef preview_changes(root_path):\n    changes = []\n    text_files = []\n    for root, _, files in os.walk(root_path):\n        for file in files:\n            if file.endswith('.txt'):\n                text_files.append(os.path.join(root, file))\n    zip_path = os.path.join(root_path, 'texts.zip')\n    if text_files:\n        changes.append((\"zip\", (text_files, zip_path)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"zip\":\n            files_to_zip, zip_path = change[1]\n            with zipfile.ZipFile(zip_path, 'w') as zipf:\n                for file in files_to_zip:\n                    zipf.write(file, os.path.relpath(file, os.path.dirname(zip_path)))"
  },
  {
    "timestamp": "2024-07-18T01:40:41.845942",
    "instruction": "unzip texts.zip all place the files in the same folder",
    "code": "import os\nimport zipfile\n\nROOT_PATH = \"/path/to/root\"\n\ndef preview_changes(root_path):\n    changes = []\n    zip_path = os.path.join(root_path, \"texts.zip\")\n    extract_to = root_path\n    changes.append((\"unzip\", (zip_path, extract_to)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"unzip\":\n            zip_path, extract_to = change[1]\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_to)"
  },
  {
    "timestamp": "2024-07-18T01:41:24.680496",
    "instruction": "create a zip file of each individual file",
    "code": "import os\nimport zipfile\n\nROOT_PATH = '/path/to/root'\n\ndef preview_changes(root_path):\n    changes = []\n    for root, _, files in os.walk(root_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            zip_path = file_path + '.zip'\n            changes.append((\"zip\", ([file_path], zip_path)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"zip\":\n            files_to_zip, zip_path = change[1]\n            with zipfile.ZipFile(zip_path, 'w') as zipf:\n                for file in files_to_zip:\n                    zipf.write(file, os.path.basename(file))"
  },
  {
    "timestamp": "2024-07-18T01:46:43.054146",
    "instruction": "make a copy of all the txt files, add an incrementing number to each file",
    "code": "import os\nimport shutil\n\nROOT_PATH = \"your/root/path\"\n\ndef preview_changes(root_path):\n    changes = []\n    txt_files = [f for f in os.listdir(root_path) if f.endswith(\".txt\")]\n    for i, file_name in enumerate(txt_files, start=1):\n        source_path = os.path.join(root_path, file_name)\n        destination_path = os.path.join(\n            root_path, f\"{os.path.splitext(file_name)[0]}_{i}.txt\"\n        )\n        print(f\"Would copy: {source_path} -> {destination_path}\")\n        changes.append((\"copy\", (source_path, destination_path)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"copy\":\n            source_path, destination_path = change[1]\n            shutil.copy(source_path, destination_path)"
  },
  {
    "timestamp": "2024-07-18T01:47:26.343852",
    "instruction": "copy each image into a subfolder with the name of the original file",
    "code": "import os\nimport shutil\n\ndef preview_changes(root_path):\n    changes = []\n    for root, dirs, files in os.walk(root_path):\n        for file in files:\n            if re.search(r'\\.(jpg|jpeg|png|gif|bmp|tiff)$', file, re.IGNORECASE):\n                source_path = os.path.join(root, file)\n                destination_dir = os.path.join(root, os.path.splitext(file)[0])\n                destination_path = os.path.join(destination_dir, file)\n                if not os.path.exists(destination_dir):\n                    changes.append((\"mkdir\", destination_dir))\n                changes.append((\"copy\", (source_path, destination_path)))\n                print(f\"Would copy: {source_path} -> {destination_path}\")\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        operation, paths = change\n        if operation == \"mkdir\":\n            os.makedirs(paths, exist_ok=True)\n        elif operation == \"copy\":\n            source_path, destination_path = paths\n            shutil.copy2(source_path, destination_path)"
  },
  {
    "timestamp": "2024-07-18T02:04:40.811742",
    "instruction": "Copy each file into a folder called Backups",
    "code": "import os\nimport shutil\n\ndef preview_changes(root_path):\n    changes = []\n    backup_folder = os.path.join(root_path, 'Backups')\n    changes.append((\"create_folder\", backup_folder))\n    \n    for item in os.listdir(root_path):\n        item_path = os.path.join(root_path, item)\n        if os.path.isfile(item_path):\n            destination_path = os.path.join(backup_folder, item)\n            changes.append((\"copy\", (item_path, destination_path)))\n    \n    for change in changes:\n        if change[0] == \"create_folder\":\n            print(f\"Would create folder: {change[1]}\")\n        elif change[0] == \"copy\":\n            print(f\"Would copy: {change[1][0]} -> {change[1][1]}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"create_folder\":\n            os.makedirs(change[1], exist_ok=True)\n        elif change[0] == \"copy\":\n            shutil.copy2(change[1][0], change[1][1])"
  },
  {
    "timestamp": "2024-07-18T10:42:09.011330",
    "instruction": "Create a subfolder for each number between 1 and 10",
    "code": "import os\n\ndef preview_changes(root_path):\n    changes = []\n    for i in range(1, 11):\n        folder_path = os.path.join(root_path, str(i))\n        changes.append((\"create_folder\", folder_path))\n        print(f\"Would create folder: {folder_path}\")\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"create_folder\":\n            folder_path = change[1]\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)"
  },
  {
    "timestamp": "2024-07-18T10:45:20.924508",
    "instruction": "move each file where the file name ends with the number 2 into a subfolder called \"twos\"",
    "code": "import os\nimport shutil\nimport re\n\ndef preview_changes(root_path):\n    changes = []\n    twos_folder = os.path.join(root_path, \"twos\")\n    if not os.path.exists(twos_folder):\n        changes.append((\"create_folder\", twos_folder))\n        print(f\"Would create folder: {twos_folder}\")\n\n    for file_name in os.listdir(root_path):\n        if re.search(r'.*2\\..*$', file_name):\n            old_path = os.path.join(root_path, file_name)\n            new_path = os.path.join(twos_folder, file_name)\n            if old_path != new_path:\n                changes.append((\"move\", (old_path, new_path)))\n                print(f\"Would move: {old_path} -> {new_path}\")\n\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"create_folder\":\n            folder_path = change[1]\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)\n        elif change[0] == \"move\":\n            old_path, new_path = change[1]\n            if not os.path.exists(os.path.dirname(new_path)):\n                os.makedirs(os.path.dirname(new_path))\n            shutil.move(old_path, new_path)"
  },
  {
    "timestamp": "2024-07-18T10:52:48.517358",
    "instruction": "move each file into a subfolder with the name matching the last letter of the file name, excluding the extension.",
    "code": "import os\nimport shutil\n\ndef preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for filename in os.listdir(root_path):\n        file_path = os.path.join(root_path, filename)\n        if os.path.isfile(file_path):\n            file_name, file_ext = os.path.splitext(filename)\n            folder_name = file_name[-1]  # Get the last letter of the file name (excluding extension)\n            folder_path = os.path.join(root_path, folder_name)\n\n            if file_path != os.path.join(folder_path, filename):\n                changes.append((\"create_folder\", folder_path))\n                changes.append((\"move\", (file_path, os.path.join(folder_path, filename))))\n                print(f\"Would create folder: {folder_path}\")\n                print(f\"Would move: {file_path} -> {os.path.join(folder_path, filename)}\")\n                \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_folder\":\n            folder_path = change[1]\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)\n        elif change[0] == \"move\":\n            old_path, new_path = change[1]\n            if not os.path.exists(os.path.dirname(new_path)):\n                os.makedirs(os.path.dirname(new_path))\n            shutil.move(old_path, new_path)\n\n# Example usage:\n# root_path = \"/path/to/your/directory\"\n# changes = preview_changes(root_path)\n# execute_changes(changes)"
  },
  {
    "timestamp": "2024-07-18T11:09:47.537014",
    "instruction": "delete all empty folders",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    \n    for dirpath, dirnames, filenames in os.walk(root_path, topdown=False):\n        if not dirnames and not filenames:  # Check if the directory is empty\n            changes.append((\"delete\", dirpath))\n            print(f\"Would delete empty folder: {dirpath}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation, path = change\n        if operation == \"delete\":\n            send2trash(path)\n            print(f\"Deleted empty folder: {path}\")"
  },
  {
    "timestamp": "2024-07-18T11:40:02.996019",
    "instruction": "change the format of all files inside of subfolders to .txt. Ignore files in the root folder.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for dirpath, dirnames, filenames in os.walk(root_path):\n        # Ignore the root folder\n        if dirpath == root_path:\n            continue\n        for filename in filenames:\n            old_path = os.path.join(dirpath, filename)\n            new_filename = os.path.splitext(filename)[0] + '.txt'\n            new_path = os.path.join(dirpath, new_filename)\n            if old_path != new_path:\n                changes.append((\"move\", (old_path, new_path)))\n                print(f\"Would move: {old_path} -> {new_path}\")\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation, params = change\n        if operation == \"move\":\n            old_path, new_path = params\n            os.makedirs(os.path.dirname(new_path), exist_ok=True)\n            shutil.move(old_path, new_path)"
  }
]