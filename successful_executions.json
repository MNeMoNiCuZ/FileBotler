[
  {
    "timestamp": "2024-07-18T00:43:35.414290",
    "instruction": "Increment each number in the name of all our .txt files.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            new_name = ''.join([str(int(char) + 1) if char.isdigit() else char for char in filename])\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            old_path = os.path.join(root_path, filename)\n            new_name = ''.join([str(int(char) + 1) if char.isdigit() else char for char in filename])\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:44:00.286568",
    "instruction": "Increment each number in the name of all our .txt files.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            new_name = ''.join(str(int(char) + 1) if char.isdigit() else char for char in filename)\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            old_path = os.path.join(root_path, filename)\n            new_name = ''.join(str(int(char) + 1) if char.isdigit() else char for char in filename)\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:44:18.855389",
    "instruction": "invert the names of all image files",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):\n            name, ext = os.path.splitext(filename)\n            new_name = f\"{name[::-1]}{ext}\"\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):\n            old_path = os.path.join(root_path, filename)\n            name, ext = os.path.splitext(filename)\n            new_name = f\"{name[::-1]}{ext}\"\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:46:31.970859",
    "instruction": "invert the name of all our .png files, if the file name contains the number 1. Do not invert the extension, just the name.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png') and '1' in filename:\n            name_part = filename[:-4]\n            inverted_name = name_part[::-1] + \".png\"\n            print(f\"Would rename: {filename} -> {inverted_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png') and '1' in filename:\n            old_path = os.path.join(root_path, filename)\n            name_part = filename[:-4]\n            inverted_name = name_part[::-1] + \".png\"\n            new_path = os.path.join(root_path, inverted_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {inverted_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:46:57.667353",
    "instruction": "invert the name of all our .png files, if the file name contains the number 2. Do not invert the extension, just the name.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png') and '2' in filename:\n            name_part = filename[:-4]  # Exclude the '.png' part\n            new_name = f\"{name_part[::-1]}.png\"\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png') and '2' in filename:\n            old_path = os.path.join(root_path, filename)\n            name_part = filename[:-4]  # Exclude the '.png' part\n            new_name = f\"{name_part[::-1]}.png\"\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T00:47:24.196505",
    "instruction": "change the extension of all csv files to .docx",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    print(\"Preview of changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.csv'):\n            new_name = filename.replace('.csv', '.docx')\n            print(f\"Would rename: {filename} -> {new_name}\")\ndef execute_changes(root_path):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    print(\"Executing changes:\")\n    for filename in os.listdir(root_path):\n        if filename.endswith('.csv'):\n            old_path = os.path.join(root_path, filename)\n            new_name = filename.replace('.csv', '.docx')\n            new_path = os.path.join(root_path, new_name)\n            os.rename(old_path, new_path)\n            print(f\"Renamed: {filename} -> {new_name}\")"
  },
  {
    "timestamp": "2024-07-18T01:01:38.072252",
    "instruction": "remove all numbers from the names of all files",
    "code": "import os\nimport re\n\ndef preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for filename in os.listdir(root_path):\n        new_name = re.sub(r'\\d+', '', filename)\n        if new_name != filename:\n            old_path = os.path.join(root_path, filename)\n            new_path = os.path.join(root_path, new_name)\n            changes.append((old_path, new_path))\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for old_path, new_path in changes:\n        os.rename(old_path, new_path)"
  },
  {
    "timestamp": "2024-07-18T01:24:49.268603",
    "instruction": "change the extension of the images to .jpg",
    "code": "import os\n\ndef preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for filename in os.listdir(root_path):\n        if filename.endswith('.png'):\n            old_path = os.path.join(root_path, filename)\n            new_name = filename.rsplit('.', 1)[0] + '.jpg'\n            new_path = os.path.join(root_path, new_name)\n            changes.append((old_path, new_path))\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for old_path, new_path in changes:\n        os.rename(old_path, new_path)\n        print(f\"Renamed: {old_path} -> {new_path}\")"
  },
  {
    "timestamp": "2024-07-18T01:39:44.664669",
    "instruction": "zip all text files into a zip file, call it texts",
    "code": "import os\nimport zipfile\n\nROOT_PATH = '/path/to/root'\n\ndef preview_changes(root_path):\n    changes = []\n    text_files = []\n    for root, _, files in os.walk(root_path):\n        for file in files:\n            if file.endswith('.txt'):\n                text_files.append(os.path.join(root, file))\n    zip_path = os.path.join(root_path, 'texts.zip')\n    if text_files:\n        changes.append((\"zip\", (text_files, zip_path)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"zip\":\n            files_to_zip, zip_path = change[1]\n            with zipfile.ZipFile(zip_path, 'w') as zipf:\n                for file in files_to_zip:\n                    zipf.write(file, os.path.relpath(file, os.path.dirname(zip_path)))"
  },
  {
    "timestamp": "2024-07-18T01:40:41.845942",
    "instruction": "unzip texts.zip all place the files in the same folder",
    "code": "import os\nimport zipfile\n\nROOT_PATH = \"/path/to/root\"\n\ndef preview_changes(root_path):\n    changes = []\n    zip_path = os.path.join(root_path, \"texts.zip\")\n    extract_to = root_path\n    changes.append((\"unzip\", (zip_path, extract_to)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"unzip\":\n            zip_path, extract_to = change[1]\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_to)"
  },
  {
    "timestamp": "2024-07-18T01:41:24.680496",
    "instruction": "create a zip file of each individual file",
    "code": "import os\nimport zipfile\n\nROOT_PATH = '/path/to/root'\n\ndef preview_changes(root_path):\n    changes = []\n    for root, _, files in os.walk(root_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            zip_path = file_path + '.zip'\n            changes.append((\"zip\", ([file_path], zip_path)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"zip\":\n            files_to_zip, zip_path = change[1]\n            with zipfile.ZipFile(zip_path, 'w') as zipf:\n                for file in files_to_zip:\n                    zipf.write(file, os.path.basename(file))"
  },
  {
    "timestamp": "2024-07-18T01:46:43.054146",
    "instruction": "make a copy of all the txt files, add an incrementing number to each file",
    "code": "import os\nimport shutil\n\nROOT_PATH = \"your/root/path\"\n\ndef preview_changes(root_path):\n    changes = []\n    txt_files = [f for f in os.listdir(root_path) if f.endswith(\".txt\")]\n    for i, file_name in enumerate(txt_files, start=1):\n        source_path = os.path.join(root_path, file_name)\n        destination_path = os.path.join(\n            root_path, f\"{os.path.splitext(file_name)[0]}_{i}.txt\"\n        )\n        print(f\"Would copy: {source_path} -> {destination_path}\")\n        changes.append((\"copy\", (source_path, destination_path)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"copy\":\n            source_path, destination_path = change[1]\n            shutil.copy(source_path, destination_path)"
  },
  {
    "timestamp": "2024-07-18T01:47:26.343852",
    "instruction": "copy each image into a subfolder with the name of the original file",
    "code": "import os\nimport shutil\n\ndef preview_changes(root_path):\n    changes = []\n    for root, dirs, files in os.walk(root_path):\n        for file in files:\n            if re.search(r'\\.(jpg|jpeg|png|gif|bmp|tiff)$', file, re.IGNORECASE):\n                source_path = os.path.join(root, file)\n                destination_dir = os.path.join(root, os.path.splitext(file)[0])\n                destination_path = os.path.join(destination_dir, file)\n                if not os.path.exists(destination_dir):\n                    changes.append((\"mkdir\", destination_dir))\n                changes.append((\"copy\", (source_path, destination_path)))\n                print(f\"Would copy: {source_path} -> {destination_path}\")\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        operation, paths = change\n        if operation == \"mkdir\":\n            os.makedirs(paths, exist_ok=True)\n        elif operation == \"copy\":\n            source_path, destination_path = paths\n            shutil.copy2(source_path, destination_path)"
  },
  {
    "timestamp": "2024-07-18T02:04:40.811742",
    "instruction": "Copy each file into a folder called Backups",
    "code": "import os\nimport shutil\n\ndef preview_changes(root_path):\n    changes = []\n    backup_folder = os.path.join(root_path, 'Backups')\n    changes.append((\"create_folder\", backup_folder))\n    \n    for item in os.listdir(root_path):\n        item_path = os.path.join(root_path, item)\n        if os.path.isfile(item_path):\n            destination_path = os.path.join(backup_folder, item)\n            changes.append((\"copy\", (item_path, destination_path)))\n    \n    for change in changes:\n        if change[0] == \"create_folder\":\n            print(f\"Would create folder: {change[1]}\")\n        elif change[0] == \"copy\":\n            print(f\"Would copy: {change[1][0]} -> {change[1][1]}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"create_folder\":\n            os.makedirs(change[1], exist_ok=True)\n        elif change[0] == \"copy\":\n            shutil.copy2(change[1][0], change[1][1])"
  },
  {
    "timestamp": "2024-07-18T10:42:09.011330",
    "instruction": "Create a subfolder for each number between 1 and 10",
    "code": "import os\n\ndef preview_changes(root_path):\n    changes = []\n    for i in range(1, 11):\n        folder_path = os.path.join(root_path, str(i))\n        changes.append((\"create_folder\", folder_path))\n        print(f\"Would create folder: {folder_path}\")\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"create_folder\":\n            folder_path = change[1]\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)"
  },
  {
    "timestamp": "2024-07-18T10:45:20.924508",
    "instruction": "move each file where the file name ends with the number 2 into a subfolder called \"twos\"",
    "code": "import os\nimport shutil\nimport re\n\ndef preview_changes(root_path):\n    changes = []\n    twos_folder = os.path.join(root_path, \"twos\")\n    if not os.path.exists(twos_folder):\n        changes.append((\"create_folder\", twos_folder))\n        print(f\"Would create folder: {twos_folder}\")\n\n    for file_name in os.listdir(root_path):\n        if re.search(r'.*2\\..*$', file_name):\n            old_path = os.path.join(root_path, file_name)\n            new_path = os.path.join(twos_folder, file_name)\n            if old_path != new_path:\n                changes.append((\"move\", (old_path, new_path)))\n                print(f\"Would move: {old_path} -> {new_path}\")\n\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"create_folder\":\n            folder_path = change[1]\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)\n        elif change[0] == \"move\":\n            old_path, new_path = change[1]\n            if not os.path.exists(os.path.dirname(new_path)):\n                os.makedirs(os.path.dirname(new_path))\n            shutil.move(old_path, new_path)"
  },
  {
    "timestamp": "2024-07-18T10:52:48.517358",
    "instruction": "move each file into a subfolder with the name matching the last letter of the file name, excluding the extension.",
    "code": "import os\nimport shutil\n\ndef preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for filename in os.listdir(root_path):\n        file_path = os.path.join(root_path, filename)\n        if os.path.isfile(file_path):\n            file_name, file_ext = os.path.splitext(filename)\n            folder_name = file_name[-1]  # Get the last letter of the file name (excluding extension)\n            folder_path = os.path.join(root_path, folder_name)\n\n            if file_path != os.path.join(folder_path, filename):\n                changes.append((\"create_folder\", folder_path))\n                changes.append((\"move\", (file_path, os.path.join(folder_path, filename))))\n                print(f\"Would create folder: {folder_path}\")\n                print(f\"Would move: {file_path} -> {os.path.join(folder_path, filename)}\")\n                \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_folder\":\n            folder_path = change[1]\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)\n        elif change[0] == \"move\":\n            old_path, new_path = change[1]\n            if not os.path.exists(os.path.dirname(new_path)):\n                os.makedirs(os.path.dirname(new_path))\n            shutil.move(old_path, new_path)\n\n# Example usage:\n# root_path = \"/path/to/your/directory\"\n# changes = preview_changes(root_path)\n# execute_changes(changes)"
  },
  {
    "timestamp": "2024-07-18T11:09:47.537014",
    "instruction": "delete all empty folders",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    \n    for dirpath, dirnames, filenames in os.walk(root_path, topdown=False):\n        if not dirnames and not filenames:  # Check if the directory is empty\n            changes.append((\"delete\", dirpath))\n            print(f\"Would delete empty folder: {dirpath}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation, path = change\n        if operation == \"delete\":\n            send2trash(path)\n            print(f\"Deleted empty folder: {path}\")"
  },
  {
    "timestamp": "2024-07-19T01:44:33.678255",
    "instruction": "create a text file called monkey.txt, inside of it, write a joke.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    file_path = os.path.join(root_path, \"monkey.txt\")\n    content = \"Why don't monkeys play cards in the jungle? Because there are too many cheetahs!\"\n    changes.append((\"create_file\", (file_path, content, \"text\")))\n    print(f\"Would create file: {file_path} with content: '{content}'\")\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation, params = change\n        if operation == \"create_file\":\n            path, content, file_type = params\n            file_creation.create_file(path, content, file_type)"
  },
  {
    "timestamp": "2024-07-19T01:49:10.766376",
    "instruction": "Create a series of .txt files, name them 1-10.txt, inside each text, write a random number between 1 and 1000",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for i in range(1, 11):\n        file_name = f\"{i}.txt\"\n        file_path = os.path.join(root_path, file_name)\n        random_number = random.randint(1, 1000)\n        changes.append((\"create_file\", (file_path, str(random_number), \"text\")))\n        print(f\"Would create file: {file_path} with content: {random_number}\")\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_file\":\n            path, content, file_type = change[1]\n            create_file(path, content, file_type)"
  },
  {
    "timestamp": "2024-07-19T01:50:47.577275",
    "instruction": "create a csv file named pokemon.csv, with the names and types of the first 20 pokemon",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    csv_content = [\n        [\"Name\", \"Type\"],\n        [\"Bulbasaur\", \"Grass/Poison\"],\n        [\"Ivysaur\", \"Grass/Poison\"],\n        [\"Venusaur\", \"Grass/Poison\"],\n        [\"Charmander\", \"Fire\"],\n        [\"Charmeleon\", \"Fire\"],\n        [\"Charizard\", \"Fire/Flying\"],\n        [\"Squirtle\", \"Water\"],\n        [\"Wartortle\", \"Water\"],\n        [\"Blastoise\", \"Water\"],\n        [\"Caterpie\", \"Bug\"],\n        [\"Metapod\", \"Bug\"],\n        [\"Butterfree\", \"Bug/Flying\"],\n        [\"Weedle\", \"Bug/Poison\"],\n        [\"Kakuna\", \"Bug/Poison\"],\n        [\"Beedrill\", \"Bug/Poison\"],\n        [\"Pidgey\", \"Normal/Flying\"],\n        [\"Pidgeotto\", \"Normal/Flying\"],\n        [\"Pidgeot\", \"Normal/Flying\"],\n        [\"Rattata\", \"Normal\"],\n        [\"Raticate\", \"Normal\"]\n    ]\n    csv_path = os.path.join(root_path, \"pokemon.csv\")\n    changes.append((\"create_file\", (csv_path, csv_content, \"csv\")))\n    print(f\"Would create file: {csv_path}\")\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_file\":\n            path, content, file_type = change[1]\n            file_creation.create_file(path, content, file_type)"
  },
  {
    "timestamp": "2024-07-19T01:59:54.450471",
    "instruction": "edit pokemon.csv and add the monster index to each listed monster in a new column",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    \n    csv_path = os.path.join(root_path, 'pokemon.csv')\n    if os.path.exists(csv_path):\n        with open(csv_path, 'r', newline='') as csvfile:\n            reader = csv.reader(csvfile)\n            header = next(reader)\n            if 'Monster Index' not in header:\n                new_header = header + ['Monster Index']\n                print(f\"Would modify file: {csv_path} to add 'Monster Index' column\")\n                changes.append((\"modify_csv\", (csv_path, new_header)))\n            else:\n                print(f\"No modification needed for file: {csv_path}\")\n    else:\n        print(f\"File not found: {csv_path}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"modify_csv\":\n            csv_path, new_header = change[1]\n            temp_csv_path = csv_path + '.tmp'\n            \n            with open(csv_path, 'r', newline='') as csvfile, open(temp_csv_path, 'w', newline='') as temp_csvfile:\n                reader = csv.reader(csvfile)\n                writer = csv.writer(temp_csvfile)\n                \n                header = next(reader)\n                writer.writerow(new_header)\n                \n                for index, row in enumerate(reader, start=1):\n                    new_row = row + [index]\n                    writer.writerow(new_row)\n                    \n            shutil.move(temp_csv_path, csv_path)\n            print(f\"Modified file: {csv_path} to add 'Monster Index' column\")"
  },
  {
    "timestamp": "2024-07-19T02:08:38.389602",
    "instruction": "Create a json file called PocketMonsters.json, and fill it with data from pokemon.csv",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    csv_path = os.path.join(root_path, \"pokemon.csv\")\n    json_path = os.path.join(root_path, \"PocketMonsters.json\")\n    \n    if os.path.exists(csv_path):\n        print(f\"Would create JSON file: {json_path}\")\n        changes.append((\"create_file\", (json_path, csv_path, \"json\")))\n    else:\n        print(f\"CSV file does not exist at: {csv_path}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation, params = change\n        if operation == \"create_file\":\n            json_path, csv_path, file_type = params\n            if file_type == \"json\":\n                data = []\n                with open(csv_path, mode='r', newline='', encoding='utf-8') as csv_file:\n                    csv_reader = csv.DictReader(csv_file)\n                    for row in csv_reader:\n                        data.append(row)\n                file_creation.create_file(json_path, json.dumps(data, indent=4), file_type)"
  },
  {
    "timestamp": "2024-07-19T02:19:26.353686",
    "instruction": "Create 5 text files named \"file1.txt\" to \"file5.txt\", each containing a random quote from a famous person.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    \n    # List of quotes\n    quotes = [\n        \"The best way to predict the future is to invent it. - Alan Kay\",\n        \"Life is 10% what happens to us and 90% how we react to it. - Charles R. Swindoll\",\n        \"The only way to do great work is to love what you do. - Steve Jobs\",\n        \"If you can dream it, you can achieve it. - Zig Ziglar\",\n        \"The only limit to our realization of tomorrow is our doubts of today. - Franklin D. Roosevelt\"\n    ]\n    \n    # Create 5 text files with random quotes\n    for i in range(1, 6):\n        file_name = f\"file{i}.txt\"\n        file_path = os.path.join(root_path, file_name)\n        quote = random.choice(quotes)\n        changes.append((\"create_file\", (file_path, quote, \"text\")))\n        print(f\"Would create file: {file_path} with content: \\\"{quote}\\\"\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_file\":\n            file_path, content, file_type = change[1]\n            file_creation.create_file(file_path, content, file_type)"
  },
  {
    "timestamp": "2024-07-19T02:20:33.017903",
    "instruction": "Generate a CSV file named \"random_data.csv\" with 100 rows of random data (name, age, city).",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    \n    # Create a CSV file with random data\n    csv_path = os.path.join(root_path, \"random_data.csv\")\n    content = [[\"name\", \"age\", \"city\"]]\n    \n    names = [\"John\", \"Jane\", \"Alex\", \"Emily\", \"Chris\"]\n    cities = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]\n    \n    for _ in range(100):\n        name = random.choice(names)\n        age = random.randint(18, 70)\n        city = random.choice(cities)\n        content.append([name, age, city])\n    \n    changes.append((\"create_file\", (csv_path, content, \"csv\")))\n    print(f\"Would create file: {csv_path} with random data\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_file\":\n            path, content, file_type = change[1]\n            if file_type == \"csv\":\n                with open(path, mode='w', newline='') as file:\n                    writer = csv.writer(file)\n                    writer.writerows(content)\n            else:\n                file_creation.create_file(path, content, file_type)"
  },
  {
    "timestamp": "2024-07-19T02:21:03.579042",
    "instruction": "Create a JSON file named \"config.json\" with sample configuration data for a fictitious application.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    \n    # Define the path for the JSON file\n    json_file_path = os.path.join(root_path, \"config.json\")\n    \n    # Sample configuration data\n    config_data = {\n        \"app_name\": \"FictitiousApp\",\n        \"version\": \"1.0.0\",\n        \"settings\": {\n            \"theme\": \"dark\",\n            \"language\": \"en\"\n        }\n    }\n    \n    # Add create_file operation to changes\n    changes.append((\"create_file\", (json_file_path, config_data, \"json\")))\n    print(f\"Would create file: {json_file_path} with content: {config_data}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation, params = change\n        if operation == \"create_file\":\n            path, content, file_type = params\n            file_creation.create_file(path, content, file_type)"
  },
  {
    "timestamp": "2024-07-19T02:35:15.205981",
    "instruction": "Make a new directory called \"new images\" and create 10 512x512 single color .png files inside it, named \"image1.png\" to \"image10.png\".",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    \n    # Define the new directory path\n    new_dir_path = os.path.join(root_path, \"new images\")\n    \n    # Add folder creation to changes\n    if not os.path.exists(new_dir_path):\n        changes.append((\"create_folder\", new_dir_path))\n        print(f\"Would create folder: {new_dir_path}\")\n    \n    # Add file creation for 10 images\n    for i in range(1, 11):\n        file_name = f\"image{i}.png\"\n        file_path = os.path.join(new_dir_path, file_name)\n        changes.append((\"create_file\", (file_path, \"\", \"image\", \"pillow\")))\n        print(f\"Would create file: {file_path}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_folder\":\n            folder_path = change[1]\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)\n        elif change[0] == \"create_file\":\n            file_path, content, file_type, image_library = change[1]\n            file_creation.create_file(file_path, file_type=file_type, image_library=image_library)"
  },
  {
    "timestamp": "2024-07-19T02:36:38.680661",
    "instruction": "Rename all .txt files in the current directory by adding the prefix \"old_\" to their names.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    for filename in os.listdir(root_path):\n        if filename.endswith('.txt'):\n            old_path = os.path.join(root_path, filename)\n            new_path = os.path.join(root_path, 'old_' + filename)\n            if old_path != new_path:\n                changes.append((\"move\", (old_path, new_path)))\n                print(f\"Would move: {old_path} -> {new_path}\")\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"move\":\n            old_path, new_path = change[1]\n            os.makedirs(os.path.dirname(new_path), exist_ok=True)\n            os.rename(old_path, new_path)"
  },
  {
    "timestamp": "2024-07-19T02:39:47.110563",
    "instruction": "Find all .txt files containing the word \"important\" and copy them to a new directory called \"important_docs\".",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    important_docs_path = os.path.join(root_path, \"important_docs\")\n    \n    # Ensure the important_docs directory is proposed to be created\n    if not os.path.exists(important_docs_path):\n        changes.append((\"create_folder\", important_docs_path))\n        print(f\"Would create folder: {important_docs_path}\")\n    \n    # Walk through the directory to find .txt files containing the word \"important\"\n    for dirpath, _, filenames in os.walk(root_path):\n        for filename in filenames:\n            if filename.endswith(\".txt\"):\n                file_path = os.path.join(dirpath, filename)\n                with open(file_path, 'r') as file:\n                    if \"important\" in file.read():\n                        destination_path = os.path.join(important_docs_path, filename)\n                        if file_path != destination_path:\n                            changes.append((\"copy\", (file_path, destination_path)))\n                            print(f\"Would copy: {file_path} -> {destination_path}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation = change[0]\n        if operation == \"create_folder\":\n            folder_path = change[1]\n            if not os.path.exists(folder_path):\n                os.makedirs(folder_path)\n        elif operation == \"copy\":\n            source_path, destination_path = change[1]\n            destination_dir = os.path.dirname(destination_path)\n            if not os.path.exists(destination_dir):\n                os.makedirs(destination_dir)\n            shutil.copy2(source_path, destination_path)"
  },
  {
    "timestamp": "2024-07-19T02:45:17.369045",
    "instruction": "Merge the contents of all .txt files in the current directory into a single file called \"combined.txt\".",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    combined_file_path = os.path.join(root_path, \"combined.txt\")\n    txt_files = [f for f in os.listdir(root_path) if f.endswith('.txt') and f != \"combined.txt\"]\n    \n    if txt_files:\n        print(f\"Would create file: {combined_file_path}\")\n        changes.append((\"create_file\", (combined_file_path, \"\", \"text\", None)))\n        \n        for txt_file in txt_files:\n            txt_file_path = os.path.join(root_path, txt_file)\n            print(f\"Would merge content from: {txt_file_path}\")\n            changes.append((\"merge_content\", txt_file_path))\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    combined_file_path = None\n    combined_content = \"\"\n    \n    for change in changes:\n        if change[0] == \"create_file\":\n            combined_file_path = change[1][0]\n        \n        elif change[0] == \"merge_content\":\n            txt_file_path = change[1]\n            with open(txt_file_path, 'r') as file:\n                combined_content += file.read() + \"\\n\"\n    \n    if combined_file_path:\n        file_creation.create_file(combined_file_path, combined_content, file_type=\"text\", image_library=None)"
  },
  {
    "timestamp": "2024-07-19T02:45:41.761969",
    "instruction": "Create a log file that lists the name, size, and last modified date of all files in the current directory.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    log_entries = []\n    for filename in os.listdir(root_path):\n        file_path = os.path.join(root_path, filename)\n        if os.path.isfile(file_path):\n            file_size = os.path.getsize(file_path)\n            last_modified = datetime.datetime.fromtimestamp(os.path.getmtime(file_path)).strftime('%Y-%m-%d %H:%M:%S')\n            log_entries.append(f\"Name: {filename}, Size: {file_size} bytes, Last Modified: {last_modified}\")\n    \n    log_content = \"\\n\".join(log_entries)\n    log_path = os.path.join(root_path, \"file_log.txt\")\n    changes.append((\"create_file\", (log_path, log_content, \"text\", None)))\n    \n    for change in changes:\n        if change[0] == \"create_file\":\n            path, content, file_type, _ = change[1]\n            print(f\"Would create file: {path} with content length: {len(content)}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_file\":\n            path, content, file_type, _ = change[1]\n            file_creation.create_file(path, content=content, file_type=file_type)"
  },
  {
    "timestamp": "2024-07-19T03:01:50.712326",
    "instruction": "Create an empty text file named EmptyText.txt",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    # Path for the new text file\n    new_file_path = os.path.join(root_path, \"EmptyText.txt\")\n    \n    # Add the file creation change\n    changes.append((\"create_file\", (new_file_path, \"\", \"text\", \"pillow\")))\n    print(f\"Would create file: {new_file_path}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_file\":\n            path, content, file_type, image_library = change[1]\n            file_creation.create_file(path, content, file_type)"
  },
  {
    "timestamp": "2024-07-19T03:02:48.906052",
    "instruction": "Generate a markdown file that creates a table of contents for all other files in the directory.",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    \n    toc_file_path = os.path.join(root_path, \"TOC.md\")\n    content_lines = [\"# Table of Contents\\n\"]\n    \n    for root, dirs, files in os.walk(root_path):\n        for file in files:\n            if file != \"TOC.md\":\n                relative_path = os.path.relpath(os.path.join(root, file), root_path)\n                content_lines.append(f\"- [{file}]({relative_path})\")\n                print(f\"Would add entry for file: {relative_path}\")\n    \n    toc_content = \"\\n\".join(content_lines)\n    changes.append((\"create_file\", (toc_file_path, toc_content, \"text\", None)))\n    print(f\"Would create file: {toc_file_path}\")\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        if change[0] == \"create_file\":\n            _, (path, content, file_type, image_library) = change\n            file_creation.create_file(path, content, file_type=file_type)"
  },
  {
    "timestamp": "2024-07-19T03:17:37.629769",
    "instruction": "delete the file encrypted_monkey.txt",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    file_to_delete = os.path.join(root_path, \"encrypted_monkey.txt\")\n    \n    if os.path.isfile(file_to_delete):\n        print(f\"Would delete: {file_to_delete}\")\n        changes.append((\"delete\", file_to_delete))\n    \n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation, path = change\n        \n        if operation == \"delete\":\n            send2trash(path)"
  },
  {
    "timestamp": "2024-07-19T14:34:40.130487",
    "instruction": "create a new text-file called helloWorld.txt and write Goodbye World inside it",
    "code": "def preview_changes(root_path):\n    \"\"\"\n    Preview the changes that would be made by the execute_changes function.\n    This function should not modify any files.\n    \"\"\"\n    changes = []\n    file_path = os.path.join(root_path, \"helloWorld.txt\")\n    content = \"Goodbye World\"\n    changes.append((\"create_file\", (file_path, content, \"text\", None)))\n    print(f\"Would create file: {file_path} with content: {content}\")\n    return changes\n\ndef execute_changes(changes):\n    \"\"\"\n    Execute the actual file operations.\n    \"\"\"\n    for change in changes:\n        operation, parameters = change\n        if operation == \"create_file\":\n            file_path, content, file_type, image_library = parameters\n            file_creation.create_file(file_path, content=content, file_type=file_type)"
  },
  {
    "timestamp": "2024-07-19T15:33:09.879438",
    "instruction": "Create a .log file and write a daily poem inside it",
    "code": "def preview_changes(root_path):\n    changes = []\n    log_file_path = os.path.join(root_path, \"daily_poem.log\")\n    current_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n    content = f\"{current_date}: Roses are red, violets are blue, this is a daily poem, just for you.\\n\"\n    print(f\"Would create file: {log_file_path}\")\n    changes.append((\"create_file\", (log_file_path, content, \"text\", None)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"create_file\":\n            path, content, file_type, image_library = change[1]\n            directory = os.path.dirname(path)\n            if not os.path.exists(directory):\n                os.makedirs(directory)\n            file_creation.create_file(path=path, content=content, file_type=file_type)"
  },
  {
    "timestamp": "2024-07-19T15:47:04.722140",
    "instruction": "Rename all .txt files that have the words HelloWorld in the file names to instead say GoodbyeWorld",
    "code": "def preview_changes(root_path):\n    changes = []\n    for root, dirs, files in os.walk(root_path):\n        for file in files:\n            if file.endswith(\".txt\") and \"HelloWorld\" in file:\n                old_path = os.path.join(root, file)\n                new_file_name = file.replace(\"HelloWorld\", \"GoodbyeWorld\")\n                new_path = os.path.join(root, new_file_name)\n                if old_path != new_path:\n                    print(f\"Would move: {old_path} -> {new_path}\")\n                    changes.append((\"move\", (old_path, new_path)))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"move\":\n            old_path, new_path = change[1]\n            os.makedirs(os.path.dirname(new_path), exist_ok=True)\n            shutil.move(old_path, new_path)"
  },
  {
    "timestamp": "2024-07-19T15:48:22.795072",
    "instruction": "Delete the file GoodbyeWorld 2.txt",
    "code": "def preview_changes(root_path):\n    changes = []\n    file_to_delete = os.path.join(root_path, \"GoodbyeWorld 2.txt\")\n    if os.path.isfile(file_to_delete):\n        print(f\"Would delete file: {file_to_delete}\")\n        changes.append((\"delete\", file_to_delete))\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"delete\":\n            send2trash(change[1])"
  },
  {
    "timestamp": "2024-07-19T15:56:54.019589",
    "instruction": "Change the extension all files with poem in the file name to .poem",
    "code": "def preview_changes(root_path):\n    changes = []\n    for root, dirs, files in os.walk(root_path):\n        for file in files:\n            if 'poem' in file and not file.endswith('.poem'):\n                old_path = os.path.join(root, file)\n                new_path = os.path.join(root, os.path.splitext(file)[0] + '.poem')\n                changes.append((\"move\", (old_path, new_path)))\n                print(f\"Would move (rename extension): {old_path} -> {new_path}\")\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == \"move\":\n            old_path, new_path = change[1]\n            if not os.path.exists(os.path.dirname(new_path)):\n                os.makedirs(os.path.dirname(new_path))\n            shutil.move(old_path, new_path)"
  },
  {
    "timestamp": "2024-07-19T15:58:57.623374",
    "instruction": "Create a HeloooooWooooorld.txt file with a unique hello world message",
    "code": "def preview_changes(root_path):\n    path = os.path.join(root_path, 'HeloooooWooooorld.txt')\n    content = 'Hello, World! This is a unique message.'\n    changes = [('create_file', (path, content, 'text', 'default'))]\n    print(f'Would create file: {path}')\n    return changes\n\ndef execute_changes(changes):\n    for change in changes:\n        if change[0] == 'create_file':\n            path, content, file_type, image_library = change[1]\n            create_file(path, content, file_type, image_library)"
  }
]